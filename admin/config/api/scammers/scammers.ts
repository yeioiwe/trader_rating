/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Project Admin API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type { MutationFunction, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';

import type { ScammerCreateDto } from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const scammersCreate = (scammerCreateDto: ScammerCreateDto, signal?: AbortSignal) => {
    return axiosCall<number>({
        url: `/scammers/create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: scammerCreateDto,
        signal,
    });
};

export const getScammersCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersCreate>>,
        TError,
        { data: ScammerCreateDto },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof scammersCreate>>, TError, { data: ScammerCreateDto }, TContext> => {
    const mutationKey = ['scammersCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof scammersCreate>>,
        { data: ScammerCreateDto }
    > = props => {
        const { data } = props ?? {};

        return scammersCreate(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type ScammersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof scammersCreate>>>;
export type ScammersCreateMutationBody = ScammerCreateDto;
export type ScammersCreateMutationError = ErrorType<unknown>;

export const useScammersCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersCreate>>,
        TError,
        { data: ScammerCreateDto },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof scammersCreate>>, TError, { data: ScammerCreateDto }, TContext> => {
    const mutationOptions = getScammersCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
