/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Project Admin API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type {
    ScammerCommentList,
    ScammerCreateComment,
    ScammerCreateDto,
    ScammerDemoProfileItemList,
    ScammerEditAboutDto,
    ScammerProfileAbout,
    ScammerProfileItem,
    ScammerUpdatePositionListDto,
} from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const scammersCreate = (scammerCreateDto: ScammerCreateDto, signal?: AbortSignal) => {
    return axiosCall<number>({
        url: `/scammers/create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: scammerCreateDto,
        signal,
    });
};

export const getScammersCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersCreate>>,
        TError,
        { data: ScammerCreateDto },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof scammersCreate>>, TError, { data: ScammerCreateDto }, TContext> => {
    const mutationKey = ['scammersCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof scammersCreate>>,
        { data: ScammerCreateDto }
    > = props => {
        const { data } = props ?? {};

        return scammersCreate(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type ScammersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof scammersCreate>>>;
export type ScammersCreateMutationBody = ScammerCreateDto;
export type ScammersCreateMutationError = ErrorType<unknown>;

export const useScammersCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersCreate>>,
        TError,
        { data: ScammerCreateDto },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof scammersCreate>>, TError, { data: ScammerCreateDto }, TContext> => {
    const mutationOptions = getScammersCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const scammersGetList = (signal?: AbortSignal) => {
    return axiosCall<ScammerDemoProfileItemList>({ url: `/scammers/list`, method: 'GET', signal });
};

export const getScammersGetListQueryKey = () => {
    return [`/scammers/list`] as const;
};

export const getScammersGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetList>>> = ({ signal }) => scammersGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof scammersGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetList>>>;
export type ScammersGetListInfiniteQueryError = ErrorType<unknown>;

export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getScammersGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetList>>> = ({ signal }) => scammersGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof scammersGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetListQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetList>>>;
export type ScammersGetListQueryError = ErrorType<unknown>;

export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetListQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const scammersGetOne = (id: number, signal?: AbortSignal) => {
    return axiosCall<ScammerProfileItem>({ url: `/scammers/one/${id}`, method: 'GET', signal });
};

export const getScammersGetOneQueryKey = (id: number) => {
    return [`/scammers/one/${id}`] as const;
};

export const getScammersGetOneInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetOne>>> = ({ signal }) =>
        scammersGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof scammersGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetOne>>>;
export type ScammersGetOneInfiniteQueryError = ErrorType<unknown>;

export function useScammersGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetOne>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetOneInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getScammersGetOneQueryOptions = <
    TData = Awaited<ReturnType<typeof scammersGetOne>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetOne>>> = ({ signal }) =>
        scammersGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof scammersGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetOne>>>;
export type ScammersGetOneQueryError = ErrorType<unknown>;

export function useScammersGetOne<TData = Awaited<ReturnType<typeof scammersGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetOne<TData = Awaited<ReturnType<typeof scammersGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetOne>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetOne<TData = Awaited<ReturnType<typeof scammersGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetOne<TData = Awaited<ReturnType<typeof scammersGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetOneQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const scammersGetAbout = (id: number, signal?: AbortSignal) => {
    return axiosCall<ScammerProfileAbout>({ url: `/scammers/about/${id}`, method: 'GET', signal });
};

export const getScammersGetAboutQueryKey = (id: number) => {
    return [`/scammers/about/${id}`] as const;
};

export const getScammersGetAboutInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetAboutQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetAbout>>> = ({ signal }) =>
        scammersGetAbout(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof scammersGetAbout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetAboutInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetAbout>>>;
export type ScammersGetAboutInfiniteQueryError = ErrorType<unknown>;

export function useScammersGetAboutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetAbout>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetAbout>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetAboutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetAbout>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetAbout>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetAboutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetAboutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetAboutInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getScammersGetAboutQueryOptions = <
    TData = Awaited<ReturnType<typeof scammersGetAbout>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetAboutQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetAbout>>> = ({ signal }) =>
        scammersGetAbout(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof scammersGetAbout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetAboutQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetAbout>>>;
export type ScammersGetAboutQueryError = ErrorType<unknown>;

export function useScammersGetAbout<TData = Awaited<ReturnType<typeof scammersGetAbout>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetAbout>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetAbout>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetAbout<TData = Awaited<ReturnType<typeof scammersGetAbout>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetAbout>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetAbout>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetAbout<TData = Awaited<ReturnType<typeof scammersGetAbout>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetAbout<TData = Awaited<ReturnType<typeof scammersGetAbout>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetAbout>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetAboutQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const scammersEditAbout = (id: number, scammerEditAboutDto: ScammerEditAboutDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/scammers/about/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: scammerEditAboutDto,
        signal,
    });
};

export const getScammersEditAboutMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersEditAbout>>,
        TError,
        { id: number; data: ScammerEditAboutDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof scammersEditAbout>>,
    TError,
    { id: number; data: ScammerEditAboutDto },
    TContext
> => {
    const mutationKey = ['scammersEditAbout'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof scammersEditAbout>>,
        { id: number; data: ScammerEditAboutDto }
    > = props => {
        const { id, data } = props ?? {};

        return scammersEditAbout(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type ScammersEditAboutMutationResult = NonNullable<Awaited<ReturnType<typeof scammersEditAbout>>>;
export type ScammersEditAboutMutationBody = ScammerEditAboutDto;
export type ScammersEditAboutMutationError = ErrorType<unknown>;

export const useScammersEditAbout = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersEditAbout>>,
        TError,
        { id: number; data: ScammerEditAboutDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof scammersEditAbout>>,
    TError,
    { id: number; data: ScammerEditAboutDto },
    TContext
> => {
    const mutationOptions = getScammersEditAboutMutationOptions(options);

    return useMutation(mutationOptions);
};
export const scammersEditProfile = (id: number, scammerCreateDto: ScammerCreateDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/scammers/profile/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: scammerCreateDto,
        signal,
    });
};

export const getScammersEditProfileMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersEditProfile>>,
        TError,
        { id: number; data: ScammerCreateDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof scammersEditProfile>>,
    TError,
    { id: number; data: ScammerCreateDto },
    TContext
> => {
    const mutationKey = ['scammersEditProfile'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof scammersEditProfile>>,
        { id: number; data: ScammerCreateDto }
    > = props => {
        const { id, data } = props ?? {};

        return scammersEditProfile(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type ScammersEditProfileMutationResult = NonNullable<Awaited<ReturnType<typeof scammersEditProfile>>>;
export type ScammersEditProfileMutationBody = ScammerCreateDto;
export type ScammersEditProfileMutationError = ErrorType<unknown>;

export const useScammersEditProfile = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersEditProfile>>,
        TError,
        { id: number; data: ScammerCreateDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof scammersEditProfile>>,
    TError,
    { id: number; data: ScammerCreateDto },
    TContext
> => {
    const mutationOptions = getScammersEditProfileMutationOptions(options);

    return useMutation(mutationOptions);
};
export const scammersUpdatePosition = (
    scammerUpdatePositionListDto: ScammerUpdatePositionListDto,
    signal?: AbortSignal,
) => {
    return axiosCall<void>({
        url: `/scammers/position`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: scammerUpdatePositionListDto,
        signal,
    });
};

export const getScammersUpdatePositionMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersUpdatePosition>>,
        TError,
        { data: ScammerUpdatePositionListDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof scammersUpdatePosition>>,
    TError,
    { data: ScammerUpdatePositionListDto },
    TContext
> => {
    const mutationKey = ['scammersUpdatePosition'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof scammersUpdatePosition>>,
        { data: ScammerUpdatePositionListDto }
    > = props => {
        const { data } = props ?? {};

        return scammersUpdatePosition(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type ScammersUpdatePositionMutationResult = NonNullable<Awaited<ReturnType<typeof scammersUpdatePosition>>>;
export type ScammersUpdatePositionMutationBody = ScammerUpdatePositionListDto;
export type ScammersUpdatePositionMutationError = ErrorType<unknown>;

export const useScammersUpdatePosition = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersUpdatePosition>>,
        TError,
        { data: ScammerUpdatePositionListDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof scammersUpdatePosition>>,
    TError,
    { data: ScammerUpdatePositionListDto },
    TContext
> => {
    const mutationOptions = getScammersUpdatePositionMutationOptions(options);

    return useMutation(mutationOptions);
};
export const scammersCommentCreate = (id: number, scammerCreateComment: ScammerCreateComment, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/scammers/comment/create/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: scammerCreateComment,
        signal,
    });
};

export const getScammersCommentCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersCommentCreate>>,
        TError,
        { id: number; data: ScammerCreateComment },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof scammersCommentCreate>>,
    TError,
    { id: number; data: ScammerCreateComment },
    TContext
> => {
    const mutationKey = ['scammersCommentCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof scammersCommentCreate>>,
        { id: number; data: ScammerCreateComment }
    > = props => {
        const { id, data } = props ?? {};

        return scammersCommentCreate(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type ScammersCommentCreateMutationResult = NonNullable<Awaited<ReturnType<typeof scammersCommentCreate>>>;
export type ScammersCommentCreateMutationBody = ScammerCreateComment;
export type ScammersCommentCreateMutationError = ErrorType<unknown>;

export const useScammersCommentCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersCommentCreate>>,
        TError,
        { id: number; data: ScammerCreateComment },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof scammersCommentCreate>>,
    TError,
    { id: number; data: ScammerCreateComment },
    TContext
> => {
    const mutationOptions = getScammersCommentCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const scammersDeleteCreate = (id: number, signal?: AbortSignal) => {
    return axiosCall<void>({ url: `/scammers/comment/delete/${id}`, method: 'POST', signal });
};

export const getScammersDeleteCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof scammersDeleteCreate>>, TError, { id: number }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof scammersDeleteCreate>>, TError, { id: number }, TContext> => {
    const mutationKey = ['scammersDeleteCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof scammersDeleteCreate>>, { id: number }> = props => {
        const { id } = props ?? {};

        return scammersDeleteCreate(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type ScammersDeleteCreateMutationResult = NonNullable<Awaited<ReturnType<typeof scammersDeleteCreate>>>;

export type ScammersDeleteCreateMutationError = ErrorType<unknown>;

export const useScammersDeleteCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof scammersDeleteCreate>>, TError, { id: number }, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof scammersDeleteCreate>>, TError, { id: number }, TContext> => {
    const mutationOptions = getScammersDeleteCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const scammersGetCommentList = (id: number, signal?: AbortSignal) => {
    return axiosCall<ScammerCommentList>({ url: `/scammers/comment/${id}`, method: 'GET', signal });
};

export const getScammersGetCommentListQueryKey = (id: number) => {
    return [`/scammers/comment/${id}`] as const;
};

export const getScammersGetCommentListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetCommentList>>> = ({ signal }) =>
        scammersGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof scammersGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetCommentListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetCommentList>>>;
export type ScammersGetCommentListInfiniteQueryError = ErrorType<unknown>;

export function useScammersGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetCommentListInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getScammersGetCommentListQueryOptions = <
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetCommentList>>> = ({ signal }) =>
        scammersGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof scammersGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetCommentListQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetCommentList>>>;
export type ScammersGetCommentListQueryError = ErrorType<unknown>;

export function useScammersGetCommentList<
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetCommentList<
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetCommentList<
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetCommentList<
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetCommentListQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
