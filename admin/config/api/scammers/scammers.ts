/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Project Admin API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type { ScammerCreateDto, ScammerDemoProfileItemList } from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const scammersCreate = (scammerCreateDto: ScammerCreateDto, signal?: AbortSignal) => {
    return axiosCall<number>({
        url: `/scammers/create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: scammerCreateDto,
        signal,
    });
};

export const getScammersCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersCreate>>,
        TError,
        { data: ScammerCreateDto },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof scammersCreate>>, TError, { data: ScammerCreateDto }, TContext> => {
    const mutationKey = ['scammersCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof scammersCreate>>,
        { data: ScammerCreateDto }
    > = props => {
        const { data } = props ?? {};

        return scammersCreate(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type ScammersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof scammersCreate>>>;
export type ScammersCreateMutationBody = ScammerCreateDto;
export type ScammersCreateMutationError = ErrorType<unknown>;

export const useScammersCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof scammersCreate>>,
        TError,
        { data: ScammerCreateDto },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof scammersCreate>>, TError, { data: ScammerCreateDto }, TContext> => {
    const mutationOptions = getScammersCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const scammersGetList = (signal?: AbortSignal) => {
    return axiosCall<ScammerDemoProfileItemList>({ url: `/scammers/list`, method: 'GET', signal });
};

export const getScammersGetListQueryKey = () => {
    return [`/scammers/list`] as const;
};

export const getScammersGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetList>>> = ({ signal }) => scammersGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof scammersGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetList>>>;
export type ScammersGetListInfiniteQueryError = ErrorType<unknown>;

export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getScammersGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetList>>> = ({ signal }) => scammersGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof scammersGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetListQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetList>>>;
export type ScammersGetListQueryError = ErrorType<unknown>;

export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetListQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
