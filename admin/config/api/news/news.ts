/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Project Admin API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type {
    CreateSeoDto,
    NewsCommentList,
    NewsCreateComment,
    NewsCreateDto,
    NewsItem,
    NewsPreviewList,
    SeoItem,
} from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const newsCreate = (newsCreateDto: NewsCreateDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/news/create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: newsCreateDto,
        signal,
    });
};

export const getNewsCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof newsCreate>>, TError, { data: NewsCreateDto }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof newsCreate>>, TError, { data: NewsCreateDto }, TContext> => {
    const mutationKey = ['newsCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsCreate>>, { data: NewsCreateDto }> = props => {
        const { data } = props ?? {};

        return newsCreate(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type NewsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof newsCreate>>>;
export type NewsCreateMutationBody = NewsCreateDto;
export type NewsCreateMutationError = ErrorType<unknown>;

export const useNewsCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof newsCreate>>, TError, { data: NewsCreateDto }, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof newsCreate>>, TError, { data: NewsCreateDto }, TContext> => {
    const mutationOptions = getNewsCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const newsEdit = (id: number, newsCreateDto: NewsCreateDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/news/edit/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: newsCreateDto,
        signal,
    });
};

export const getNewsEditMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof newsEdit>>,
        TError,
        { id: number; data: NewsCreateDto },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof newsEdit>>, TError, { id: number; data: NewsCreateDto }, TContext> => {
    const mutationKey = ['newsEdit'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof newsEdit>>,
        { id: number; data: NewsCreateDto }
    > = props => {
        const { id, data } = props ?? {};

        return newsEdit(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type NewsEditMutationResult = NonNullable<Awaited<ReturnType<typeof newsEdit>>>;
export type NewsEditMutationBody = NewsCreateDto;
export type NewsEditMutationError = ErrorType<unknown>;

export const useNewsEdit = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof newsEdit>>,
        TError,
        { id: number; data: NewsCreateDto },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof newsEdit>>, TError, { id: number; data: NewsCreateDto }, TContext> => {
    const mutationOptions = getNewsEditMutationOptions(options);

    return useMutation(mutationOptions);
};
export const newsGetList = (signal?: AbortSignal) => {
    return axiosCall<NewsPreviewList>({ url: `/news/list`, method: 'GET', signal });
};

export const getNewsGetListQueryKey = () => {
    return [`/news/list`] as const;
};

export const getNewsGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetList>>> = ({ signal }) => newsGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetList>>>;
export type NewsGetListInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof newsGetList>>,
                TError,
                Awaited<ReturnType<typeof newsGetList>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof newsGetList>>,
                TError,
                Awaited<ReturnType<typeof newsGetList>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof newsGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetList>>> = ({ signal }) => newsGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetListQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetList>>>;
export type NewsGetListQueryError = ErrorType<unknown>;

export function useNewsGetList<TData = Awaited<ReturnType<typeof newsGetList>>, TError = ErrorType<unknown>>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof newsGetList>>,
                TError,
                Awaited<ReturnType<typeof newsGetList>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetList<TData = Awaited<ReturnType<typeof newsGetList>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof newsGetList>>,
                TError,
                Awaited<ReturnType<typeof newsGetList>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetList<TData = Awaited<ReturnType<typeof newsGetList>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetList<TData = Awaited<ReturnType<typeof newsGetList>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetListQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const newsGetOne = (id: number, signal?: AbortSignal) => {
    return axiosCall<NewsItem>({ url: `/news/one/${id}`, method: 'GET', signal });
};

export const getNewsGetOneQueryKey = (id: number) => {
    return [`/news/one/${id}`] as const;
};

export const getNewsGetOneInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetOne>>> = ({ signal }) => newsGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetOne>>>;
export type NewsGetOneInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetOne>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetOneInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetOneQueryOptions = <TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetOne>>> = ({ signal }) => newsGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetOne>>>;
export type NewsGetOneQueryError = ErrorType<unknown>;

export function useNewsGetOne<TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetOne<TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetOne>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetOne<TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetOne<TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetOneQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const newsCommentCreate = (id: number, newsCreateComment: NewsCreateComment, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/news/comment/create/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: newsCreateComment,
        signal,
    });
};

export const getNewsCommentCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof newsCommentCreate>>,
        TError,
        { id: number; data: NewsCreateComment },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof newsCommentCreate>>,
    TError,
    { id: number; data: NewsCreateComment },
    TContext
> => {
    const mutationKey = ['newsCommentCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof newsCommentCreate>>,
        { id: number; data: NewsCreateComment }
    > = props => {
        const { id, data } = props ?? {};

        return newsCommentCreate(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type NewsCommentCreateMutationResult = NonNullable<Awaited<ReturnType<typeof newsCommentCreate>>>;
export type NewsCommentCreateMutationBody = NewsCreateComment;
export type NewsCommentCreateMutationError = ErrorType<unknown>;

export const useNewsCommentCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof newsCommentCreate>>,
        TError,
        { id: number; data: NewsCreateComment },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof newsCommentCreate>>,
    TError,
    { id: number; data: NewsCreateComment },
    TContext
> => {
    const mutationOptions = getNewsCommentCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const newsDeleteComment = (id: number, signal?: AbortSignal) => {
    return axiosCall<void>({ url: `/news/comment/delete/${id}`, method: 'POST', signal });
};

export const getNewsDeleteCommentMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof newsDeleteComment>>, TError, { id: number }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof newsDeleteComment>>, TError, { id: number }, TContext> => {
    const mutationKey = ['newsDeleteComment'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsDeleteComment>>, { id: number }> = props => {
        const { id } = props ?? {};

        return newsDeleteComment(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type NewsDeleteCommentMutationResult = NonNullable<Awaited<ReturnType<typeof newsDeleteComment>>>;

export type NewsDeleteCommentMutationError = ErrorType<unknown>;

export const useNewsDeleteComment = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof newsDeleteComment>>, TError, { id: number }, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof newsDeleteComment>>, TError, { id: number }, TContext> => {
    const mutationOptions = getNewsDeleteCommentMutationOptions(options);

    return useMutation(mutationOptions);
};
export const newsGetCommentList = (id: number, signal?: AbortSignal) => {
    return axiosCall<NewsCommentList>({ url: `/news/comment/${id}`, method: 'GET', signal });
};

export const getNewsGetCommentListQueryKey = (id: number) => {
    return [`/news/comment/${id}`] as const;
};

export const getNewsGetCommentListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetCommentList>>> = ({ signal }) =>
        newsGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetCommentListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetCommentList>>>;
export type NewsGetCommentListInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetCommentListInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetCommentListQueryOptions = <
    TData = Awaited<ReturnType<typeof newsGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetCommentList>>> = ({ signal }) =>
        newsGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetCommentListQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetCommentList>>>;
export type NewsGetCommentListQueryError = ErrorType<unknown>;

export function useNewsGetCommentList<
    TData = Awaited<ReturnType<typeof newsGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetCommentList<
    TData = Awaited<ReturnType<typeof newsGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetCommentList<
    TData = Awaited<ReturnType<typeof newsGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetCommentList<
    TData = Awaited<ReturnType<typeof newsGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetCommentListQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const newsEditSeo = (id: number, createSeoDto: CreateSeoDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/news/seo/create/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createSeoDto,
        signal,
    });
};

export const getNewsEditSeoMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof newsEditSeo>>,
        TError,
        { id: number; data: CreateSeoDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof newsEditSeo>>,
    TError,
    { id: number; data: CreateSeoDto },
    TContext
> => {
    const mutationKey = ['newsEditSeo'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof newsEditSeo>>,
        { id: number; data: CreateSeoDto }
    > = props => {
        const { id, data } = props ?? {};

        return newsEditSeo(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type NewsEditSeoMutationResult = NonNullable<Awaited<ReturnType<typeof newsEditSeo>>>;
export type NewsEditSeoMutationBody = CreateSeoDto;
export type NewsEditSeoMutationError = ErrorType<unknown>;

export const useNewsEditSeo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof newsEditSeo>>,
        TError,
        { id: number; data: CreateSeoDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof newsEditSeo>>,
    TError,
    { id: number; data: CreateSeoDto },
    TContext
> => {
    const mutationOptions = getNewsEditSeoMutationOptions(options);

    return useMutation(mutationOptions);
};
export const newsGetSeo = (id: number, signal?: AbortSignal) => {
    return axiosCall<SeoItem>({ url: `/news/seo/${id}`, method: 'GET', signal });
};

export const getNewsGetSeoQueryKey = (id: number) => {
    return [`/news/seo/${id}`] as const;
};

export const getNewsGetSeoInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetSeoQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetSeo>>> = ({ signal }) => newsGetSeo(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetSeo>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetSeoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetSeo>>>;
export type NewsGetSeoInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetSeo>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetSeo>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetSeoInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetSeoQueryOptions = <TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetSeoQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetSeo>>> = ({ signal }) => newsGetSeo(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetSeo>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetSeoQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetSeo>>>;
export type NewsGetSeoQueryError = ErrorType<unknown>;

export function useNewsGetSeo<TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetSeo>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetSeo<TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetSeo>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetSeo<TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetSeo<TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetSeoQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
