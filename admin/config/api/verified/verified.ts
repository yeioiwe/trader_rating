/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Project Admin API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type {
    VerifiedCommentList,
    VerifiedCreateComment,
    VerifiedCreateDto,
    VerifiedDemoProfileItemList,
    VerifiedEditAboutDto,
    VerifiedProfileAbout,
    VerifiedProfileItem,
    VerifiedUpdatePositionListDto,
} from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const verifiedCreate = (verifiedCreateDto: VerifiedCreateDto, signal?: AbortSignal) => {
    return axiosCall<number>({
        url: `/verified/create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: verifiedCreateDto,
        signal,
    });
};

export const getVerifiedCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedCreate>>,
        TError,
        { data: VerifiedCreateDto },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof verifiedCreate>>, TError, { data: VerifiedCreateDto }, TContext> => {
    const mutationKey = ['verifiedCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verifiedCreate>>,
        { data: VerifiedCreateDto }
    > = props => {
        const { data } = props ?? {};

        return verifiedCreate(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type VerifiedCreateMutationResult = NonNullable<Awaited<ReturnType<typeof verifiedCreate>>>;
export type VerifiedCreateMutationBody = VerifiedCreateDto;
export type VerifiedCreateMutationError = ErrorType<unknown>;

export const useVerifiedCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedCreate>>,
        TError,
        { data: VerifiedCreateDto },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof verifiedCreate>>, TError, { data: VerifiedCreateDto }, TContext> => {
    const mutationOptions = getVerifiedCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const verifiedGetList = (signal?: AbortSignal) => {
    return axiosCall<VerifiedDemoProfileItemList>({ url: `/verified/list`, method: 'GET', signal });
};

export const getVerifiedGetListQueryKey = () => {
    return [`/verified/list`] as const;
};

export const getVerifiedGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetList>>> = ({ signal }) => verifiedGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof verifiedGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetList>>>;
export type VerifiedGetListInfiniteQueryError = ErrorType<unknown>;

export function useVerifiedGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof verifiedGetList>>,
                TError,
                Awaited<ReturnType<typeof verifiedGetList>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof verifiedGetList>>,
                TError,
                Awaited<ReturnType<typeof verifiedGetList>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getVerifiedGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof verifiedGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetList>>> = ({ signal }) => verifiedGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verifiedGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetListQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetList>>>;
export type VerifiedGetListQueryError = ErrorType<unknown>;

export function useVerifiedGetList<
    TData = Awaited<ReturnType<typeof verifiedGetList>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof verifiedGetList>>,
                TError,
                Awaited<ReturnType<typeof verifiedGetList>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetList<
    TData = Awaited<ReturnType<typeof verifiedGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof verifiedGetList>>,
                TError,
                Awaited<ReturnType<typeof verifiedGetList>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetList<
    TData = Awaited<ReturnType<typeof verifiedGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetList<
    TData = Awaited<ReturnType<typeof verifiedGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetListQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const verifiedGetOne = (id: number, signal?: AbortSignal) => {
    return axiosCall<VerifiedProfileItem>({ url: `/verified/one/${id}`, method: 'GET', signal });
};

export const getVerifiedGetOneQueryKey = (id: number) => {
    return [`/verified/one/${id}`] as const;
};

export const getVerifiedGetOneInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetOne>>> = ({ signal }) =>
        verifiedGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof verifiedGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetOne>>>;
export type VerifiedGetOneInfiniteQueryError = ErrorType<unknown>;

export function useVerifiedGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetOne>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetOneInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getVerifiedGetOneQueryOptions = <
    TData = Awaited<ReturnType<typeof verifiedGetOne>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetOne>>> = ({ signal }) =>
        verifiedGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verifiedGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetOne>>>;
export type VerifiedGetOneQueryError = ErrorType<unknown>;

export function useVerifiedGetOne<TData = Awaited<ReturnType<typeof verifiedGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetOne<TData = Awaited<ReturnType<typeof verifiedGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetOne>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetOne<TData = Awaited<ReturnType<typeof verifiedGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetOne<TData = Awaited<ReturnType<typeof verifiedGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetOneQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const verifiedGetAbout = (id: number, signal?: AbortSignal) => {
    return axiosCall<VerifiedProfileAbout>({ url: `/verified/about/${id}`, method: 'GET', signal });
};

export const getVerifiedGetAboutQueryKey = (id: number) => {
    return [`/verified/about/${id}`] as const;
};

export const getVerifiedGetAboutInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetAboutQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetAbout>>> = ({ signal }) =>
        verifiedGetAbout(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof verifiedGetAbout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetAboutInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetAbout>>>;
export type VerifiedGetAboutInfiniteQueryError = ErrorType<unknown>;

export function useVerifiedGetAboutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetAbout>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetAbout>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetAboutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetAbout>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetAbout>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetAboutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetAboutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetAbout>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetAboutInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getVerifiedGetAboutQueryOptions = <
    TData = Awaited<ReturnType<typeof verifiedGetAbout>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetAboutQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetAbout>>> = ({ signal }) =>
        verifiedGetAbout(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verifiedGetAbout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetAboutQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetAbout>>>;
export type VerifiedGetAboutQueryError = ErrorType<unknown>;

export function useVerifiedGetAbout<TData = Awaited<ReturnType<typeof verifiedGetAbout>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetAbout>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetAbout>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetAbout<TData = Awaited<ReturnType<typeof verifiedGetAbout>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetAbout>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetAbout>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetAbout<TData = Awaited<ReturnType<typeof verifiedGetAbout>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetAbout<TData = Awaited<ReturnType<typeof verifiedGetAbout>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetAbout>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetAboutQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const verifiedEditAbout = (id: number, verifiedEditAboutDto: VerifiedEditAboutDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/verified/about/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: verifiedEditAboutDto,
        signal,
    });
};

export const getVerifiedEditAboutMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedEditAbout>>,
        TError,
        { id: number; data: VerifiedEditAboutDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof verifiedEditAbout>>,
    TError,
    { id: number; data: VerifiedEditAboutDto },
    TContext
> => {
    const mutationKey = ['verifiedEditAbout'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verifiedEditAbout>>,
        { id: number; data: VerifiedEditAboutDto }
    > = props => {
        const { id, data } = props ?? {};

        return verifiedEditAbout(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type VerifiedEditAboutMutationResult = NonNullable<Awaited<ReturnType<typeof verifiedEditAbout>>>;
export type VerifiedEditAboutMutationBody = VerifiedEditAboutDto;
export type VerifiedEditAboutMutationError = ErrorType<unknown>;

export const useVerifiedEditAbout = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedEditAbout>>,
        TError,
        { id: number; data: VerifiedEditAboutDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof verifiedEditAbout>>,
    TError,
    { id: number; data: VerifiedEditAboutDto },
    TContext
> => {
    const mutationOptions = getVerifiedEditAboutMutationOptions(options);

    return useMutation(mutationOptions);
};
export const verifiedEditProfile = (id: number, verifiedCreateDto: VerifiedCreateDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/verified/profile/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: verifiedCreateDto,
        signal,
    });
};

export const getVerifiedEditProfileMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedEditProfile>>,
        TError,
        { id: number; data: VerifiedCreateDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof verifiedEditProfile>>,
    TError,
    { id: number; data: VerifiedCreateDto },
    TContext
> => {
    const mutationKey = ['verifiedEditProfile'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verifiedEditProfile>>,
        { id: number; data: VerifiedCreateDto }
    > = props => {
        const { id, data } = props ?? {};

        return verifiedEditProfile(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type VerifiedEditProfileMutationResult = NonNullable<Awaited<ReturnType<typeof verifiedEditProfile>>>;
export type VerifiedEditProfileMutationBody = VerifiedCreateDto;
export type VerifiedEditProfileMutationError = ErrorType<unknown>;

export const useVerifiedEditProfile = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedEditProfile>>,
        TError,
        { id: number; data: VerifiedCreateDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof verifiedEditProfile>>,
    TError,
    { id: number; data: VerifiedCreateDto },
    TContext
> => {
    const mutationOptions = getVerifiedEditProfileMutationOptions(options);

    return useMutation(mutationOptions);
};
export const verifiedUpdatePosition = (
    verifiedUpdatePositionListDto: VerifiedUpdatePositionListDto,
    signal?: AbortSignal,
) => {
    return axiosCall<void>({
        url: `/verified/position`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: verifiedUpdatePositionListDto,
        signal,
    });
};

export const getVerifiedUpdatePositionMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedUpdatePosition>>,
        TError,
        { data: VerifiedUpdatePositionListDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof verifiedUpdatePosition>>,
    TError,
    { data: VerifiedUpdatePositionListDto },
    TContext
> => {
    const mutationKey = ['verifiedUpdatePosition'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verifiedUpdatePosition>>,
        { data: VerifiedUpdatePositionListDto }
    > = props => {
        const { data } = props ?? {};

        return verifiedUpdatePosition(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type VerifiedUpdatePositionMutationResult = NonNullable<Awaited<ReturnType<typeof verifiedUpdatePosition>>>;
export type VerifiedUpdatePositionMutationBody = VerifiedUpdatePositionListDto;
export type VerifiedUpdatePositionMutationError = ErrorType<unknown>;

export const useVerifiedUpdatePosition = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedUpdatePosition>>,
        TError,
        { data: VerifiedUpdatePositionListDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof verifiedUpdatePosition>>,
    TError,
    { data: VerifiedUpdatePositionListDto },
    TContext
> => {
    const mutationOptions = getVerifiedUpdatePositionMutationOptions(options);

    return useMutation(mutationOptions);
};
export const verifiedCommentCreate = (
    id: number,
    verifiedCreateComment: VerifiedCreateComment,
    signal?: AbortSignal,
) => {
    return axiosCall<void>({
        url: `/verified/comment/create/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: verifiedCreateComment,
        signal,
    });
};

export const getVerifiedCommentCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedCommentCreate>>,
        TError,
        { id: number; data: VerifiedCreateComment },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof verifiedCommentCreate>>,
    TError,
    { id: number; data: VerifiedCreateComment },
    TContext
> => {
    const mutationKey = ['verifiedCommentCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof verifiedCommentCreate>>,
        { id: number; data: VerifiedCreateComment }
    > = props => {
        const { id, data } = props ?? {};

        return verifiedCommentCreate(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type VerifiedCommentCreateMutationResult = NonNullable<Awaited<ReturnType<typeof verifiedCommentCreate>>>;
export type VerifiedCommentCreateMutationBody = VerifiedCreateComment;
export type VerifiedCommentCreateMutationError = ErrorType<unknown>;

export const useVerifiedCommentCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof verifiedCommentCreate>>,
        TError,
        { id: number; data: VerifiedCreateComment },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof verifiedCommentCreate>>,
    TError,
    { id: number; data: VerifiedCreateComment },
    TContext
> => {
    const mutationOptions = getVerifiedCommentCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const verifiedDeleteCreate = (id: number, signal?: AbortSignal) => {
    return axiosCall<void>({ url: `/verified/comment/delete/${id}`, method: 'POST', signal });
};

export const getVerifiedDeleteCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof verifiedDeleteCreate>>, TError, { id: number }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof verifiedDeleteCreate>>, TError, { id: number }, TContext> => {
    const mutationKey = ['verifiedDeleteCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifiedDeleteCreate>>, { id: number }> = props => {
        const { id } = props ?? {};

        return verifiedDeleteCreate(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type VerifiedDeleteCreateMutationResult = NonNullable<Awaited<ReturnType<typeof verifiedDeleteCreate>>>;

export type VerifiedDeleteCreateMutationError = ErrorType<unknown>;

export const useVerifiedDeleteCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof verifiedDeleteCreate>>, TError, { id: number }, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof verifiedDeleteCreate>>, TError, { id: number }, TContext> => {
    const mutationOptions = getVerifiedDeleteCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const verifiedGetCommentList = (id: number, signal?: AbortSignal) => {
    return axiosCall<VerifiedCommentList>({ url: `/verified/comment/${id}`, method: 'GET', signal });
};

export const getVerifiedGetCommentListQueryKey = (id: number) => {
    return [`/verified/comment/${id}`] as const;
};

export const getVerifiedGetCommentListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetCommentList>>> = ({ signal }) =>
        verifiedGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof verifiedGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetCommentListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetCommentList>>>;
export type VerifiedGetCommentListInfiniteQueryError = ErrorType<unknown>;

export function useVerifiedGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetCommentListInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getVerifiedGetCommentListQueryOptions = <
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetCommentList>>> = ({ signal }) =>
        verifiedGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verifiedGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetCommentListQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetCommentList>>>;
export type VerifiedGetCommentListQueryError = ErrorType<unknown>;

export function useVerifiedGetCommentList<
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetCommentList<
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetCommentList<
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetCommentList<
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetCommentListQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
