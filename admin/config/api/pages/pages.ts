/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Project Admin API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type {
    CreateImagesBannerDto,
    EditFooterStripDto,
    EditLawyerBannerDto,
    EditLawyerLayoutDto,
    EditLawyerProfileDto,
    EditYoutubeLayoutDto,
    FooterStripItem,
    HeaderBannerEditDto,
    HeaderBannerItem,
    ImagesBannerList,
    LawyerBannerItem,
    LawyerLayoutItem,
    LawyerProfileItem,
    LawyerVisible,
    ReviewList,
    TestDto,
    YoutubeLayoutItem,
} from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const pagesEditHeaderBanner = (headerBannerEditDto: HeaderBannerEditDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/header_banner`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: headerBannerEditDto,
        signal,
    });
};

export const getPagesEditHeaderBannerMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditHeaderBanner>>,
        TError,
        { data: HeaderBannerEditDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesEditHeaderBanner>>,
    TError,
    { data: HeaderBannerEditDto },
    TContext
> => {
    const mutationKey = ['pagesEditHeaderBanner'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesEditHeaderBanner>>,
        { data: HeaderBannerEditDto }
    > = props => {
        const { data } = props ?? {};

        return pagesEditHeaderBanner(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesEditHeaderBannerMutationResult = NonNullable<Awaited<ReturnType<typeof pagesEditHeaderBanner>>>;
export type PagesEditHeaderBannerMutationBody = HeaderBannerEditDto;
export type PagesEditHeaderBannerMutationError = ErrorType<unknown>;

export const usePagesEditHeaderBanner = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditHeaderBanner>>,
        TError,
        { data: HeaderBannerEditDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof pagesEditHeaderBanner>>,
    TError,
    { data: HeaderBannerEditDto },
    TContext
> => {
    const mutationOptions = getPagesEditHeaderBannerMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesGetHeaderBanner = (signal?: AbortSignal) => {
    return axiosCall<HeaderBannerItem>({ url: `/pages/header_banner`, method: 'GET', signal });
};

export const getPagesGetHeaderBannerQueryKey = () => {
    return [`/pages/header_banner`] as const;
};

export const getPagesGetHeaderBannerInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetHeaderBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetHeaderBanner>>> = ({ signal }) =>
        pagesGetHeaderBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetHeaderBannerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>;
export type PagesGetHeaderBannerInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetHeaderBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetHeaderBanner>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetHeaderBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetHeaderBanner>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetHeaderBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetHeaderBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetHeaderBannerInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetHeaderBannerQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetHeaderBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetHeaderBanner>>> = ({ signal }) =>
        pagesGetHeaderBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetHeaderBannerQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>;
export type PagesGetHeaderBannerQueryError = ErrorType<unknown>;

export function usePagesGetHeaderBanner<
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetHeaderBanner>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetHeaderBanner<
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetHeaderBanner>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetHeaderBanner<
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetHeaderBanner<
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetHeaderBannerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesCreateImagesBanner = (createImagesBannerDto: CreateImagesBannerDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/images_banner`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createImagesBannerDto,
        signal,
    });
};

export const getPagesCreateImagesBannerMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesCreateImagesBanner>>,
        TError,
        { data: CreateImagesBannerDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesCreateImagesBanner>>,
    TError,
    { data: CreateImagesBannerDto },
    TContext
> => {
    const mutationKey = ['pagesCreateImagesBanner'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesCreateImagesBanner>>,
        { data: CreateImagesBannerDto }
    > = props => {
        const { data } = props ?? {};

        return pagesCreateImagesBanner(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesCreateImagesBannerMutationResult = NonNullable<Awaited<ReturnType<typeof pagesCreateImagesBanner>>>;
export type PagesCreateImagesBannerMutationBody = CreateImagesBannerDto;
export type PagesCreateImagesBannerMutationError = ErrorType<unknown>;

export const usePagesCreateImagesBanner = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesCreateImagesBanner>>,
        TError,
        { data: CreateImagesBannerDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof pagesCreateImagesBanner>>,
    TError,
    { data: CreateImagesBannerDto },
    TContext
> => {
    const mutationOptions = getPagesCreateImagesBannerMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesGetImagesBanner = (signal?: AbortSignal) => {
    return axiosCall<ImagesBannerList>({ url: `/pages/images_banner`, method: 'GET', signal });
};

export const getPagesGetImagesBannerQueryKey = () => {
    return [`/pages/images_banner`] as const;
};

export const getPagesGetImagesBannerInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetImagesBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetImagesBanner>>> = ({ signal }) =>
        pagesGetImagesBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetImagesBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetImagesBannerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetImagesBanner>>>;
export type PagesGetImagesBannerInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetImagesBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetImagesBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetImagesBanner>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetImagesBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetImagesBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetImagesBanner>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetImagesBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetImagesBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetImagesBannerInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetImagesBannerQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetImagesBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetImagesBanner>>> = ({ signal }) =>
        pagesGetImagesBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetImagesBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetImagesBannerQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetImagesBanner>>>;
export type PagesGetImagesBannerQueryError = ErrorType<unknown>;

export function usePagesGetImagesBanner<
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetImagesBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetImagesBanner>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetImagesBanner<
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetImagesBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetImagesBanner>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetImagesBanner<
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetImagesBanner<
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetImagesBannerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesDeleteImagesBanner = (id: number, signal?: AbortSignal) => {
    return axiosCall<void>({ url: `/pages/images_banner/delete/${id}`, method: 'POST', signal });
};

export const getPagesDeleteImagesBannerMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesDeleteImagesBanner>>,
        TError,
        { id: number },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof pagesDeleteImagesBanner>>, TError, { id: number }, TContext> => {
    const mutationKey = ['pagesDeleteImagesBanner'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof pagesDeleteImagesBanner>>, { id: number }> = props => {
        const { id } = props ?? {};

        return pagesDeleteImagesBanner(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesDeleteImagesBannerMutationResult = NonNullable<Awaited<ReturnType<typeof pagesDeleteImagesBanner>>>;

export type PagesDeleteImagesBannerMutationError = ErrorType<unknown>;

export const usePagesDeleteImagesBanner = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesDeleteImagesBanner>>,
        TError,
        { id: number },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof pagesDeleteImagesBanner>>, TError, { id: number }, TContext> => {
    const mutationOptions = getPagesDeleteImagesBannerMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesEditLawyerBanner = (editLawyerBannerDto: EditLawyerBannerDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/lawyer_banner`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: editLawyerBannerDto,
        signal,
    });
};

export const getPagesEditLawyerBannerMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditLawyerBanner>>,
        TError,
        { data: EditLawyerBannerDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesEditLawyerBanner>>,
    TError,
    { data: EditLawyerBannerDto },
    TContext
> => {
    const mutationKey = ['pagesEditLawyerBanner'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesEditLawyerBanner>>,
        { data: EditLawyerBannerDto }
    > = props => {
        const { data } = props ?? {};

        return pagesEditLawyerBanner(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesEditLawyerBannerMutationResult = NonNullable<Awaited<ReturnType<typeof pagesEditLawyerBanner>>>;
export type PagesEditLawyerBannerMutationBody = EditLawyerBannerDto;
export type PagesEditLawyerBannerMutationError = ErrorType<unknown>;

export const usePagesEditLawyerBanner = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditLawyerBanner>>,
        TError,
        { data: EditLawyerBannerDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof pagesEditLawyerBanner>>,
    TError,
    { data: EditLawyerBannerDto },
    TContext
> => {
    const mutationOptions = getPagesEditLawyerBannerMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesGetLawyerBanner = (signal?: AbortSignal) => {
    return axiosCall<LawyerBannerItem>({ url: `/pages/lawyer_banner`, method: 'GET', signal });
};

export const getPagesGetLawyerBannerQueryKey = () => {
    return [`/pages/lawyer_banner`] as const;
};

export const getPagesGetLawyerBannerInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerBanner>>> = ({ signal }) =>
        pagesGetLawyerBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerBannerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>;
export type PagesGetLawyerBannerInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetLawyerBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerBanner>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerBanner>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerBannerInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetLawyerBannerQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerBanner>>> = ({ signal }) =>
        pagesGetLawyerBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerBannerQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>;
export type PagesGetLawyerBannerQueryError = ErrorType<unknown>;

export function usePagesGetLawyerBanner<
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerBanner>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerBanner<
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerBanner>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerBanner<
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerBanner<
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerBannerQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesEditFooterStrip = (editFooterStripDto: EditFooterStripDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/footer_strip`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: editFooterStripDto,
        signal,
    });
};

export const getPagesEditFooterStripMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditFooterStrip>>,
        TError,
        { data: EditFooterStripDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesEditFooterStrip>>,
    TError,
    { data: EditFooterStripDto },
    TContext
> => {
    const mutationKey = ['pagesEditFooterStrip'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesEditFooterStrip>>,
        { data: EditFooterStripDto }
    > = props => {
        const { data } = props ?? {};

        return pagesEditFooterStrip(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesEditFooterStripMutationResult = NonNullable<Awaited<ReturnType<typeof pagesEditFooterStrip>>>;
export type PagesEditFooterStripMutationBody = EditFooterStripDto;
export type PagesEditFooterStripMutationError = ErrorType<unknown>;

export const usePagesEditFooterStrip = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditFooterStrip>>,
        TError,
        { data: EditFooterStripDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof pagesEditFooterStrip>>,
    TError,
    { data: EditFooterStripDto },
    TContext
> => {
    const mutationOptions = getPagesEditFooterStripMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesGetFooterStrip = (signal?: AbortSignal) => {
    return axiosCall<FooterStripItem>({ url: `/pages/footer_strip`, method: 'GET', signal });
};

export const getPagesGetFooterStripQueryKey = () => {
    return [`/pages/footer_strip`] as const;
};

export const getPagesGetFooterStripInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetFooterStripQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetFooterStrip>>> = ({ signal }) =>
        pagesGetFooterStrip(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetFooterStrip>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetFooterStripInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetFooterStrip>>>;
export type PagesGetFooterStripInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetFooterStripInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetFooterStrip>>,
                TError,
                Awaited<ReturnType<typeof pagesGetFooterStrip>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetFooterStripInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetFooterStrip>>,
                TError,
                Awaited<ReturnType<typeof pagesGetFooterStrip>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetFooterStripInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetFooterStripInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetFooterStripInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetFooterStripQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetFooterStripQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetFooterStrip>>> = ({ signal }) =>
        pagesGetFooterStrip(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetFooterStrip>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetFooterStripQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetFooterStrip>>>;
export type PagesGetFooterStripQueryError = ErrorType<unknown>;

export function usePagesGetFooterStrip<
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetFooterStrip>>,
                TError,
                Awaited<ReturnType<typeof pagesGetFooterStrip>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetFooterStrip<
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetFooterStrip>>,
                TError,
                Awaited<ReturnType<typeof pagesGetFooterStrip>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetFooterStrip<
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetFooterStrip<
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetFooterStripQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesEditYoutubeLayout = (editYoutubeLayoutDto: EditYoutubeLayoutDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/youtube_layout`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: editYoutubeLayoutDto,
        signal,
    });
};

export const getPagesEditYoutubeLayoutMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditYoutubeLayout>>,
        TError,
        { data: EditYoutubeLayoutDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesEditYoutubeLayout>>,
    TError,
    { data: EditYoutubeLayoutDto },
    TContext
> => {
    const mutationKey = ['pagesEditYoutubeLayout'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesEditYoutubeLayout>>,
        { data: EditYoutubeLayoutDto }
    > = props => {
        const { data } = props ?? {};

        return pagesEditYoutubeLayout(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesEditYoutubeLayoutMutationResult = NonNullable<Awaited<ReturnType<typeof pagesEditYoutubeLayout>>>;
export type PagesEditYoutubeLayoutMutationBody = EditYoutubeLayoutDto;
export type PagesEditYoutubeLayoutMutationError = ErrorType<unknown>;

export const usePagesEditYoutubeLayout = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditYoutubeLayout>>,
        TError,
        { data: EditYoutubeLayoutDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof pagesEditYoutubeLayout>>,
    TError,
    { data: EditYoutubeLayoutDto },
    TContext
> => {
    const mutationOptions = getPagesEditYoutubeLayoutMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesGetYoutubeLayout = (signal?: AbortSignal) => {
    return axiosCall<YoutubeLayoutItem>({ url: `/pages/youtube_layout`, method: 'GET', signal });
};

export const getPagesGetYoutubeLayoutQueryKey = () => {
    return [`/pages/youtube_layout`] as const;
};

export const getPagesGetYoutubeLayoutInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetYoutubeLayoutQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>> = ({ signal }) =>
        pagesGetYoutubeLayout(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetYoutubeLayoutInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>;
export type PagesGetYoutubeLayoutInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetYoutubeLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
                TError,
                Awaited<ReturnType<typeof pagesGetYoutubeLayout>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetYoutubeLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
                TError,
                Awaited<ReturnType<typeof pagesGetYoutubeLayout>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetYoutubeLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetYoutubeLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetYoutubeLayoutInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetYoutubeLayoutQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetYoutubeLayoutQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>> = ({ signal }) =>
        pagesGetYoutubeLayout(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetYoutubeLayoutQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>;
export type PagesGetYoutubeLayoutQueryError = ErrorType<unknown>;

export function usePagesGetYoutubeLayout<
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
                TError,
                Awaited<ReturnType<typeof pagesGetYoutubeLayout>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetYoutubeLayout<
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
                TError,
                Awaited<ReturnType<typeof pagesGetYoutubeLayout>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetYoutubeLayout<
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetYoutubeLayout<
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetYoutubeLayoutQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesEditLawyerLayout = (editLawyerLayoutDto: EditLawyerLayoutDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/lawyer_layout`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: editLawyerLayoutDto,
        signal,
    });
};

export const getPagesEditLawyerLayoutMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditLawyerLayout>>,
        TError,
        { data: EditLawyerLayoutDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesEditLawyerLayout>>,
    TError,
    { data: EditLawyerLayoutDto },
    TContext
> => {
    const mutationKey = ['pagesEditLawyerLayout'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesEditLawyerLayout>>,
        { data: EditLawyerLayoutDto }
    > = props => {
        const { data } = props ?? {};

        return pagesEditLawyerLayout(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesEditLawyerLayoutMutationResult = NonNullable<Awaited<ReturnType<typeof pagesEditLawyerLayout>>>;
export type PagesEditLawyerLayoutMutationBody = EditLawyerLayoutDto;
export type PagesEditLawyerLayoutMutationError = ErrorType<unknown>;

export const usePagesEditLawyerLayout = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditLawyerLayout>>,
        TError,
        { data: EditLawyerLayoutDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof pagesEditLawyerLayout>>,
    TError,
    { data: EditLawyerLayoutDto },
    TContext
> => {
    const mutationOptions = getPagesEditLawyerLayoutMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesGetLawyerLayout = (signal?: AbortSignal) => {
    return axiosCall<LawyerLayoutItem>({ url: `/pages/lawyer_layout`, method: 'GET', signal });
};

export const getPagesGetLawyerLayoutQueryKey = () => {
    return [`/pages/lawyer_layout`] as const;
};

export const getPagesGetLawyerLayoutInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerLayoutQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerLayout>>> = ({ signal }) =>
        pagesGetLawyerLayout(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerLayoutInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>;
export type PagesGetLawyerLayoutInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetLawyerLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerLayout>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerLayout>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerLayoutInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetLawyerLayoutQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerLayoutQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerLayout>>> = ({ signal }) =>
        pagesGetLawyerLayout(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerLayoutQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>;
export type PagesGetLawyerLayoutQueryError = ErrorType<unknown>;

export function usePagesGetLawyerLayout<
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerLayout>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerLayout<
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerLayout>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerLayout<
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerLayout<
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerLayoutQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesGetReviewList = (signal?: AbortSignal) => {
    return axiosCall<ReviewList>({ url: `/pages/review`, method: 'GET', signal });
};

export const getPagesGetReviewListQueryKey = () => {
    return [`/pages/review`] as const;
};

export const getPagesGetReviewListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetReviewList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetReviewListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetReviewList>>> = ({ signal }) =>
        pagesGetReviewList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetReviewList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetReviewListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetReviewList>>>;
export type PagesGetReviewListInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetReviewListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetReviewList>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetReviewList>>,
                TError,
                Awaited<ReturnType<typeof pagesGetReviewList>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetReviewListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetReviewList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetReviewList>>,
                TError,
                Awaited<ReturnType<typeof pagesGetReviewList>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetReviewListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetReviewList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetReviewListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetReviewList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetReviewListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetReviewListQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetReviewList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetReviewListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetReviewList>>> = ({ signal }) =>
        pagesGetReviewList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetReviewList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetReviewListQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetReviewList>>>;
export type PagesGetReviewListQueryError = ErrorType<unknown>;

export function usePagesGetReviewList<
    TData = Awaited<ReturnType<typeof pagesGetReviewList>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetReviewList>>,
                TError,
                Awaited<ReturnType<typeof pagesGetReviewList>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetReviewList<
    TData = Awaited<ReturnType<typeof pagesGetReviewList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetReviewList>>,
                TError,
                Awaited<ReturnType<typeof pagesGetReviewList>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetReviewList<
    TData = Awaited<ReturnType<typeof pagesGetReviewList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetReviewList<
    TData = Awaited<ReturnType<typeof pagesGetReviewList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetReviewList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetReviewListQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesDeleteReview = (id: number, signal?: AbortSignal) => {
    return axiosCall<void>({ url: `/pages/review/delete/${id}`, method: 'POST', signal });
};

export const getPagesDeleteReviewMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof pagesDeleteReview>>, TError, { id: number }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof pagesDeleteReview>>, TError, { id: number }, TContext> => {
    const mutationKey = ['pagesDeleteReview'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof pagesDeleteReview>>, { id: number }> = props => {
        const { id } = props ?? {};

        return pagesDeleteReview(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesDeleteReviewMutationResult = NonNullable<Awaited<ReturnType<typeof pagesDeleteReview>>>;

export type PagesDeleteReviewMutationError = ErrorType<unknown>;

export const usePagesDeleteReview = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof pagesDeleteReview>>, TError, { id: number }, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof pagesDeleteReview>>, TError, { id: number }, TContext> => {
    const mutationOptions = getPagesDeleteReviewMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesEditLawyerProfile = (editLawyerProfileDto: EditLawyerProfileDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/lawyer_profile`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: editLawyerProfileDto,
        signal,
    });
};

export const getPagesEditLawyerProfileMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditLawyerProfile>>,
        TError,
        { data: EditLawyerProfileDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesEditLawyerProfile>>,
    TError,
    { data: EditLawyerProfileDto },
    TContext
> => {
    const mutationKey = ['pagesEditLawyerProfile'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesEditLawyerProfile>>,
        { data: EditLawyerProfileDto }
    > = props => {
        const { data } = props ?? {};

        return pagesEditLawyerProfile(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesEditLawyerProfileMutationResult = NonNullable<Awaited<ReturnType<typeof pagesEditLawyerProfile>>>;
export type PagesEditLawyerProfileMutationBody = EditLawyerProfileDto;
export type PagesEditLawyerProfileMutationError = ErrorType<unknown>;

export const usePagesEditLawyerProfile = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesEditLawyerProfile>>,
        TError,
        { data: EditLawyerProfileDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof pagesEditLawyerProfile>>,
    TError,
    { data: EditLawyerProfileDto },
    TContext
> => {
    const mutationOptions = getPagesEditLawyerProfileMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesGetLawyerProfile = (signal?: AbortSignal) => {
    return axiosCall<LawyerProfileItem>({ url: `/pages/lawyer_profile`, method: 'GET', signal });
};

export const getPagesGetLawyerProfileQueryKey = () => {
    return [`/pages/lawyer_profile`] as const;
};

export const getPagesGetLawyerProfileInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerProfileQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerProfile>>> = ({ signal }) =>
        pagesGetLawyerProfile(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerProfileInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>;
export type PagesGetLawyerProfileInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetLawyerProfileInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerProfile>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerProfileInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerProfile>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerProfileInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerProfileInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerProfileInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetLawyerProfileQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerProfileQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerProfile>>> = ({ signal }) =>
        pagesGetLawyerProfile(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerProfileQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>;
export type PagesGetLawyerProfileQueryError = ErrorType<unknown>;

export function usePagesGetLawyerProfile<
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerProfile>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerProfile<
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerProfile>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerProfile<
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerProfile<
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerProfileQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesToggleLawyerVisible = (testDto: TestDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/lawyer_visible`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: testDto,
        signal,
    });
};

export const getPagesToggleLawyerVisibleMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesToggleLawyerVisible>>,
        TError,
        { data: TestDto },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof pagesToggleLawyerVisible>>, TError, { data: TestDto }, TContext> => {
    const mutationKey = ['pagesToggleLawyerVisible'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesToggleLawyerVisible>>,
        { data: TestDto }
    > = props => {
        const { data } = props ?? {};

        return pagesToggleLawyerVisible(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesToggleLawyerVisibleMutationResult = NonNullable<Awaited<ReturnType<typeof pagesToggleLawyerVisible>>>;
export type PagesToggleLawyerVisibleMutationBody = TestDto;
export type PagesToggleLawyerVisibleMutationError = ErrorType<unknown>;

export const usePagesToggleLawyerVisible = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesToggleLawyerVisible>>,
        TError,
        { data: TestDto },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof pagesToggleLawyerVisible>>, TError, { data: TestDto }, TContext> => {
    const mutationOptions = getPagesToggleLawyerVisibleMutationOptions(options);

    return useMutation(mutationOptions);
};
export const pagesGetLawyerVisible = (signal?: AbortSignal) => {
    return axiosCall<LawyerVisible>({ url: `/pages/lawyer_visible`, method: 'GET', signal });
};

export const getPagesGetLawyerVisibleQueryKey = () => {
    return [`/pages/lawyer_visible`] as const;
};

export const getPagesGetLawyerVisibleInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerVisible>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerVisibleQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerVisible>>> = ({ signal }) =>
        pagesGetLawyerVisible(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerVisibleInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerVisible>>>;
export type PagesGetLawyerVisibleInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetLawyerVisibleInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerVisible>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerVisible>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerVisibleInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerVisible>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerVisible>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerVisibleInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerVisible>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerVisibleInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerVisible>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerVisibleInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetLawyerVisibleQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerVisibleQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerVisible>>> = ({ signal }) =>
        pagesGetLawyerVisible(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerVisibleQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerVisible>>>;
export type PagesGetLawyerVisibleQueryError = ErrorType<unknown>;

export function usePagesGetLawyerVisible<
    TData = Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerVisible>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerVisible<
    TData = Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
                TError,
                Awaited<ReturnType<typeof pagesGetLawyerVisible>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerVisible<
    TData = Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerVisible<
    TData = Awaited<ReturnType<typeof pagesGetLawyerVisible>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerVisible>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerVisibleQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
