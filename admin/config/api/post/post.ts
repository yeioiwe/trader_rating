/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Project Admin API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type {
    PostCommentList,
    PostCreateComment,
    PostCreatePreviewDto,
    PostEditContentDto,
    PostItem,
    PostPreviewList,
} from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const postCreatePreview = (postCreatePreviewDto: PostCreatePreviewDto, signal?: AbortSignal) => {
    return axiosCall<number>({
        url: `/post/create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postCreatePreviewDto,
        signal,
    });
};

export const getPostCreatePreviewMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postCreatePreview>>,
        TError,
        { data: PostCreatePreviewDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postCreatePreview>>,
    TError,
    { data: PostCreatePreviewDto },
    TContext
> => {
    const mutationKey = ['postCreatePreview'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postCreatePreview>>,
        { data: PostCreatePreviewDto }
    > = props => {
        const { data } = props ?? {};

        return postCreatePreview(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostCreatePreviewMutationResult = NonNullable<Awaited<ReturnType<typeof postCreatePreview>>>;
export type PostCreatePreviewMutationBody = PostCreatePreviewDto;
export type PostCreatePreviewMutationError = ErrorType<unknown>;

export const usePostCreatePreview = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postCreatePreview>>,
        TError,
        { data: PostCreatePreviewDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof postCreatePreview>>,
    TError,
    { data: PostCreatePreviewDto },
    TContext
> => {
    const mutationOptions = getPostCreatePreviewMutationOptions(options);

    return useMutation(mutationOptions);
};
export const postEditPreview = (id: number, postCreatePreviewDto: PostCreatePreviewDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/post/edit/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postCreatePreviewDto,
        signal,
    });
};

export const getPostEditPreviewMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postEditPreview>>,
        TError,
        { id: number; data: PostCreatePreviewDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postEditPreview>>,
    TError,
    { id: number; data: PostCreatePreviewDto },
    TContext
> => {
    const mutationKey = ['postEditPreview'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postEditPreview>>,
        { id: number; data: PostCreatePreviewDto }
    > = props => {
        const { id, data } = props ?? {};

        return postEditPreview(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostEditPreviewMutationResult = NonNullable<Awaited<ReturnType<typeof postEditPreview>>>;
export type PostEditPreviewMutationBody = PostCreatePreviewDto;
export type PostEditPreviewMutationError = ErrorType<unknown>;

export const usePostEditPreview = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postEditPreview>>,
        TError,
        { id: number; data: PostCreatePreviewDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof postEditPreview>>,
    TError,
    { id: number; data: PostCreatePreviewDto },
    TContext
> => {
    const mutationOptions = getPostEditPreviewMutationOptions(options);

    return useMutation(mutationOptions);
};
export const postEditContent = (id: number, postEditContentDto: PostEditContentDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/post/edit/content/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postEditContentDto,
        signal,
    });
};

export const getPostEditContentMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postEditContent>>,
        TError,
        { id: number; data: PostEditContentDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postEditContent>>,
    TError,
    { id: number; data: PostEditContentDto },
    TContext
> => {
    const mutationKey = ['postEditContent'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postEditContent>>,
        { id: number; data: PostEditContentDto }
    > = props => {
        const { id, data } = props ?? {};

        return postEditContent(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostEditContentMutationResult = NonNullable<Awaited<ReturnType<typeof postEditContent>>>;
export type PostEditContentMutationBody = PostEditContentDto;
export type PostEditContentMutationError = ErrorType<unknown>;

export const usePostEditContent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postEditContent>>,
        TError,
        { id: number; data: PostEditContentDto },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof postEditContent>>,
    TError,
    { id: number; data: PostEditContentDto },
    TContext
> => {
    const mutationOptions = getPostEditContentMutationOptions(options);

    return useMutation(mutationOptions);
};
export const postGetList = (signal?: AbortSignal) => {
    return axiosCall<PostPreviewList>({ url: `/post/list`, method: 'GET', signal });
};

export const getPostGetListQueryKey = () => {
    return [`/post/list`] as const;
};

export const getPostGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetList>>> = ({ signal }) => postGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof postGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postGetList>>>;
export type PostGetListInfiniteQueryError = ErrorType<unknown>;

export function usePostGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof postGetList>>,
                TError,
                Awaited<ReturnType<typeof postGetList>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof postGetList>>,
                TError,
                Awaited<ReturnType<typeof postGetList>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPostGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof postGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetList>>> = ({ signal }) => postGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof postGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetListQueryResult = NonNullable<Awaited<ReturnType<typeof postGetList>>>;
export type PostGetListQueryError = ErrorType<unknown>;

export function usePostGetList<TData = Awaited<ReturnType<typeof postGetList>>, TError = ErrorType<unknown>>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof postGetList>>,
                TError,
                Awaited<ReturnType<typeof postGetList>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetList<TData = Awaited<ReturnType<typeof postGetList>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof postGetList>>,
                TError,
                Awaited<ReturnType<typeof postGetList>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetList<TData = Awaited<ReturnType<typeof postGetList>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetList<TData = Awaited<ReturnType<typeof postGetList>>, TError = ErrorType<unknown>>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetListQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postGetOne = (id: number, signal?: AbortSignal) => {
    return axiosCall<PostItem>({ url: `/post/post/${id}`, method: 'GET', signal });
};

export const getPostGetOneQueryKey = (id: number) => {
    return [`/post/post/${id}`] as const;
};

export const getPostGetOneInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetOne>>> = ({ signal }) => postGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof postGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postGetOne>>>;
export type PostGetOneInfiniteQueryError = ErrorType<unknown>;

export function usePostGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof postGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof postGetOne>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetOneInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPostGetOneQueryOptions = <TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetOne>>> = ({ signal }) => postGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof postGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof postGetOne>>>;
export type PostGetOneQueryError = ErrorType<unknown>;

export function usePostGetOne<TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof postGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetOne<TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof postGetOne>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetOne<TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetOne<TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetOneQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postDelete = (id: number, signal?: AbortSignal) => {
    return axiosCall<void>({ url: `/post/delete/${id}`, method: 'POST', signal });
};

export const getPostDeleteMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDelete>>, TError, { id: number }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postDelete>>, TError, { id: number }, TContext> => {
    const mutationKey = ['postDelete'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDelete>>, { id: number }> = props => {
        const { id } = props ?? {};

        return postDelete(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof postDelete>>>;

export type PostDeleteMutationError = ErrorType<unknown>;

export const usePostDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDelete>>, TError, { id: number }, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postDelete>>, TError, { id: number }, TContext> => {
    const mutationOptions = getPostDeleteMutationOptions(options);

    return useMutation(mutationOptions);
};
export const postCommentCreate = (id: number, postCreateComment: PostCreateComment, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/post/comment/create/${id}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: postCreateComment,
        signal,
    });
};

export const getPostCommentCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postCommentCreate>>,
        TError,
        { id: number; data: PostCreateComment },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postCommentCreate>>,
    TError,
    { id: number; data: PostCreateComment },
    TContext
> => {
    const mutationKey = ['postCommentCreate'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postCommentCreate>>,
        { id: number; data: PostCreateComment }
    > = props => {
        const { id, data } = props ?? {};

        return postCommentCreate(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostCommentCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postCommentCreate>>>;
export type PostCommentCreateMutationBody = PostCreateComment;
export type PostCommentCreateMutationError = ErrorType<unknown>;

export const usePostCommentCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postCommentCreate>>,
        TError,
        { id: number; data: PostCreateComment },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof postCommentCreate>>,
    TError,
    { id: number; data: PostCreateComment },
    TContext
> => {
    const mutationOptions = getPostCommentCreateMutationOptions(options);

    return useMutation(mutationOptions);
};
export const postDeleteComment = (id: number, signal?: AbortSignal) => {
    return axiosCall<void>({ url: `/post/comment/delete/${id}`, method: 'POST', signal });
};

export const getPostDeleteCommentMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDeleteComment>>, TError, { id: number }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postDeleteComment>>, TError, { id: number }, TContext> => {
    const mutationKey = ['postDeleteComment'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDeleteComment>>, { id: number }> = props => {
        const { id } = props ?? {};

        return postDeleteComment(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostDeleteCommentMutationResult = NonNullable<Awaited<ReturnType<typeof postDeleteComment>>>;

export type PostDeleteCommentMutationError = ErrorType<unknown>;

export const usePostDeleteComment = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postDeleteComment>>, TError, { id: number }, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof postDeleteComment>>, TError, { id: number }, TContext> => {
    const mutationOptions = getPostDeleteCommentMutationOptions(options);

    return useMutation(mutationOptions);
};
export const postGetCommentList = (id: number, signal?: AbortSignal) => {
    return axiosCall<PostCommentList>({ url: `/post/comment/${id}`, method: 'GET', signal });
};

export const getPostGetCommentListQueryKey = (id: number) => {
    return [`/post/comment/${id}`] as const;
};

export const getPostGetCommentListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof postGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetCommentList>>> = ({ signal }) =>
        postGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof postGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetCommentListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postGetCommentList>>>;
export type PostGetCommentListInfiniteQueryError = ErrorType<unknown>;

export function usePostGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof postGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof postGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetCommentListInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPostGetCommentListQueryOptions = <
    TData = Awaited<ReturnType<typeof postGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetCommentList>>> = ({ signal }) =>
        postGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof postGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetCommentListQueryResult = NonNullable<Awaited<ReturnType<typeof postGetCommentList>>>;
export type PostGetCommentListQueryError = ErrorType<unknown>;

export function usePostGetCommentList<
    TData = Awaited<ReturnType<typeof postGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof postGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetCommentList<
    TData = Awaited<ReturnType<typeof postGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof postGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetCommentList<
    TData = Awaited<ReturnType<typeof postGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetCommentList<
    TData = Awaited<ReturnType<typeof postGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetCommentListQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
