/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Project API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type { SeoItem, VerifiedCommentList, VerifiedDemoProfileItemList, VerifiedProfileItem } from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const verifiedGetList = (signal?: AbortSignal) => {
    return axiosCall<VerifiedDemoProfileItemList>({ url: `/verified/list`, method: 'GET', signal });
};

export const getVerifiedGetListQueryKey = () => {
    return [`/verified/list`] as const;
};

export const getVerifiedGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetList>>> = ({ signal }) => verifiedGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof verifiedGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetList>>>;
export type VerifiedGetListInfiniteQueryError = ErrorType<unknown>;

export function useVerifiedGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getVerifiedGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof verifiedGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetList>>> = ({ signal }) => verifiedGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verifiedGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetListQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetList>>>;
export type VerifiedGetListQueryError = ErrorType<unknown>;

export function useVerifiedGetList<TData = Awaited<ReturnType<typeof verifiedGetList>>, TError = ErrorType<unknown>>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetList<TData = Awaited<ReturnType<typeof verifiedGetList>>, TError = ErrorType<unknown>>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetList<TData = Awaited<ReturnType<typeof verifiedGetList>>, TError = ErrorType<unknown>>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetList<TData = Awaited<ReturnType<typeof verifiedGetList>>, TError = ErrorType<unknown>>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetListQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const verifiedGetOne = (id: string, signal?: AbortSignal) => {
    return axiosCall<VerifiedProfileItem>({ url: `/verified/project/${id}`, method: 'GET', signal });
};

export const getVerifiedGetOneQueryKey = (id: string) => {
    return [`/verified/project/${id}`] as const;
};

export const getVerifiedGetOneInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetOne>>> = ({ signal }) =>
        verifiedGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof verifiedGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetOne>>>;
export type VerifiedGetOneInfiniteQueryError = ErrorType<unknown>;

export function useVerifiedGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetOneInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getVerifiedGetOneQueryOptions = <
    TData = Awaited<ReturnType<typeof verifiedGetOne>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetOne>>> = ({ signal }) =>
        verifiedGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verifiedGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetOne>>>;
export type VerifiedGetOneQueryError = ErrorType<unknown>;

export function useVerifiedGetOne<TData = Awaited<ReturnType<typeof verifiedGetOne>>, TError = ErrorType<unknown>>(
    id: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetOne<TData = Awaited<ReturnType<typeof verifiedGetOne>>, TError = ErrorType<unknown>>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetOne<TData = Awaited<ReturnType<typeof verifiedGetOne>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetOne<TData = Awaited<ReturnType<typeof verifiedGetOne>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetOneQueryOptions(id, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const verifiedGetCommentList = (id: number, signal?: AbortSignal) => {
    return axiosCall<VerifiedCommentList>({ url: `/verified/comment/${id}`, method: 'GET', signal });
};

export const getVerifiedGetCommentListQueryKey = (id: number) => {
    return [`/verified/comment/${id}`] as const;
};

export const getVerifiedGetCommentListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetCommentList>>> = ({ signal }) =>
        verifiedGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof verifiedGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetCommentListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetCommentList>>>;
export type VerifiedGetCommentListInfiniteQueryError = ErrorType<unknown>;

export function useVerifiedGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetCommentList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetCommentList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetCommentListInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getVerifiedGetCommentListQueryOptions = <
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetCommentList>>> = ({ signal }) =>
        verifiedGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verifiedGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetCommentListQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetCommentList>>>;
export type VerifiedGetCommentListQueryError = ErrorType<unknown>;

export function useVerifiedGetCommentList<
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetCommentList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetCommentList<
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetCommentList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetCommentList<
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetCommentList<
    TData = Awaited<ReturnType<typeof verifiedGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetCommentList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetCommentListQueryOptions(id, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const verifiedGetSeo = (id: string, signal?: AbortSignal) => {
    return axiosCall<SeoItem>({ url: `/verified/seo/${id}`, method: 'GET', signal });
};

export const getVerifiedGetSeoQueryKey = (id: string) => {
    return [`/verified/seo/${id}`] as const;
};

export const getVerifiedGetSeoInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetSeoQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetSeo>>> = ({ signal }) =>
        verifiedGetSeo(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof verifiedGetSeo>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetSeoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetSeo>>>;
export type VerifiedGetSeoInfiniteQueryError = ErrorType<unknown>;

export function useVerifiedGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof verifiedGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetSeoInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getVerifiedGetSeoQueryOptions = <
    TData = Awaited<ReturnType<typeof verifiedGetSeo>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getVerifiedGetSeoQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof verifiedGetSeo>>> = ({ signal }) =>
        verifiedGetSeo(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof verifiedGetSeo>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type VerifiedGetSeoQueryResult = NonNullable<Awaited<ReturnType<typeof verifiedGetSeo>>>;
export type VerifiedGetSeoQueryError = ErrorType<unknown>;

export function useVerifiedGetSeo<TData = Awaited<ReturnType<typeof verifiedGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetSeo<TData = Awaited<ReturnType<typeof verifiedGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof verifiedGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof verifiedGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useVerifiedGetSeo<TData = Awaited<ReturnType<typeof verifiedGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useVerifiedGetSeo<TData = Awaited<ReturnType<typeof verifiedGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof verifiedGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getVerifiedGetSeoQueryOptions(id, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
