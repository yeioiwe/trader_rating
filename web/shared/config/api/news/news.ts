/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Project API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type { NewsCommentList, NewsItem, NewsPreviewList, SeoItem } from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const newsGetList = (signal?: AbortSignal) => {
    return axiosCall<NewsPreviewList>({ url: `/news/list`, method: 'GET', signal });
};

export const getNewsGetListQueryKey = () => {
    return [`/news/list`] as const;
};

export const getNewsGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetList>>> = ({ signal }) => newsGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetList>>>;
export type NewsGetListInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetList>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetList>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof newsGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetList>>> = ({ signal }) => newsGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetListQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetList>>>;
export type NewsGetListQueryError = ErrorType<unknown>;

export function useNewsGetList<TData = Awaited<ReturnType<typeof newsGetList>>, TError = ErrorType<unknown>>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetList>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetList<TData = Awaited<ReturnType<typeof newsGetList>>, TError = ErrorType<unknown>>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetList>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetList<TData = Awaited<ReturnType<typeof newsGetList>>, TError = ErrorType<unknown>>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetList<TData = Awaited<ReturnType<typeof newsGetList>>, TError = ErrorType<unknown>>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetListQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const newsGetTop = (signal?: AbortSignal) => {
    return axiosCall<NewsPreviewList>({ url: `/news/top`, method: 'GET', signal });
};

export const getNewsGetTopQueryKey = () => {
    return [`/news/top`] as const;
};

export const getNewsGetTopInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetTop>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetTopQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetTop>>> = ({ signal }) => newsGetTop(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetTop>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetTopInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetTop>>>;
export type NewsGetTopInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetTopInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetTop>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetTop>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetTop>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetTopInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetTop>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetTop>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetTop>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetTopInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetTop>>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetTopInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetTop>>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetTopInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetTopQueryOptions = <
    TData = Awaited<ReturnType<typeof newsGetTop>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetTopQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetTop>>> = ({ signal }) => newsGetTop(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetTop>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetTopQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetTop>>>;
export type NewsGetTopQueryError = ErrorType<unknown>;

export function useNewsGetTop<TData = Awaited<ReturnType<typeof newsGetTop>>, TError = ErrorType<unknown>>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetTop>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetTop>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetTop<TData = Awaited<ReturnType<typeof newsGetTop>>, TError = ErrorType<unknown>>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetTop>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetTop>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetTop<TData = Awaited<ReturnType<typeof newsGetTop>>, TError = ErrorType<unknown>>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetTop<TData = Awaited<ReturnType<typeof newsGetTop>>, TError = ErrorType<unknown>>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetTop>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetTopQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const newsGetOne = (url: string, signal?: AbortSignal) => {
    return axiosCall<NewsItem>({ url: `/news/one/${url}`, method: 'GET', signal });
};

export const getNewsGetOneQueryKey = (url: string) => {
    return [`/news/one/${url}`] as const;
};

export const getNewsGetOneInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetOneQueryKey(url);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetOne>>> = ({ signal }) => newsGetOne(url, signal);

    return { queryKey, queryFn, enabled: !!url, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetOne>>>;
export type NewsGetOneInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetOneInfiniteQueryOptions(url, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetOneQueryOptions = <TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetOneQueryKey(url);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetOne>>> = ({ signal }) => newsGetOne(url, signal);

    return { queryKey, queryFn, enabled: !!url, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetOne>>>;
export type NewsGetOneQueryError = ErrorType<unknown>;

export function useNewsGetOne<TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetOne<TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetOne<TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetOne<TData = Awaited<ReturnType<typeof newsGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetOneQueryOptions(url, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const newsGetComments = (id: number, signal?: AbortSignal) => {
    return axiosCall<NewsCommentList>({ url: `/news/comments/${id}`, method: 'GET', signal });
};

export const getNewsGetCommentsQueryKey = (id: number) => {
    return [`/news/comments/${id}`] as const;
};

export const getNewsGetCommentsInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetCommentsQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetComments>>> = ({ signal }) =>
        newsGetComments(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetComments>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetCommentsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetComments>>>;
export type NewsGetCommentsInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetCommentsInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetComments>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetComments>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetCommentsInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetComments>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetComments>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetCommentsInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetCommentsInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetCommentsInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetCommentsQueryOptions = <
    TData = Awaited<ReturnType<typeof newsGetComments>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetCommentsQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetComments>>> = ({ signal }) =>
        newsGetComments(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetComments>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetComments>>>;
export type NewsGetCommentsQueryError = ErrorType<unknown>;

export function useNewsGetComments<TData = Awaited<ReturnType<typeof newsGetComments>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetComments>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetComments>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetComments<TData = Awaited<ReturnType<typeof newsGetComments>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetComments>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetComments>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetComments<TData = Awaited<ReturnType<typeof newsGetComments>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetComments<TData = Awaited<ReturnType<typeof newsGetComments>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetComments>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetCommentsQueryOptions(id, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const newsGetSeo = (id: string, signal?: AbortSignal) => {
    return axiosCall<SeoItem>({ url: `/news/seo/${id}`, method: 'GET', signal });
};

export const getNewsGetSeoQueryKey = (id: string) => {
    return [`/news/seo/${id}`] as const;
};

export const getNewsGetSeoInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetSeoQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetSeo>>> = ({ signal }) => newsGetSeo(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof newsGetSeo>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetSeoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetSeo>>>;
export type NewsGetSeoInfiniteQueryError = ErrorType<unknown>;

export function useNewsGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof newsGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetSeoInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getNewsGetSeoQueryOptions = <TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getNewsGetSeoQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof newsGetSeo>>> = ({ signal }) => newsGetSeo(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof newsGetSeo>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NewsGetSeoQueryResult = NonNullable<Awaited<ReturnType<typeof newsGetSeo>>>;
export type NewsGetSeoQueryError = ErrorType<unknown>;

export function useNewsGetSeo<TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetSeo<TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof newsGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof newsGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useNewsGetSeo<TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useNewsGetSeo<TData = Awaited<ReturnType<typeof newsGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof newsGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getNewsGetSeoQueryOptions(id, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
