/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Project API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type { PostCommentsList, PostItem, PostPreviewList, SeoItem } from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const postGetList = (signal?: AbortSignal) => {
    return axiosCall<PostPreviewList>({ url: `/post/list`, method: 'GET', signal });
};

export const getPostGetListQueryKey = () => {
    return [`/post/list`] as const;
};

export const getPostGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetList>>> = ({ signal }) => postGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof postGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postGetList>>>;
export type PostGetListInfiniteQueryError = ErrorType<unknown>;

export function usePostGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetList>>,
                    TError,
                    Awaited<ReturnType<typeof postGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetList>>,
                    TError,
                    Awaited<ReturnType<typeof postGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetList>>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPostGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof postGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetList>>> = ({ signal }) => postGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof postGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetListQueryResult = NonNullable<Awaited<ReturnType<typeof postGetList>>>;
export type PostGetListQueryError = ErrorType<unknown>;

export function usePostGetList<TData = Awaited<ReturnType<typeof postGetList>>, TError = ErrorType<unknown>>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetList>>,
                    TError,
                    Awaited<ReturnType<typeof postGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetList<TData = Awaited<ReturnType<typeof postGetList>>, TError = ErrorType<unknown>>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetList>>,
                    TError,
                    Awaited<ReturnType<typeof postGetList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetList<TData = Awaited<ReturnType<typeof postGetList>>, TError = ErrorType<unknown>>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetList<TData = Awaited<ReturnType<typeof postGetList>>, TError = ErrorType<unknown>>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetListQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postGetOne = (url: string, signal?: AbortSignal) => {
    return axiosCall<PostItem>({ url: `/post/one/${url}`, method: 'GET', signal });
};

export const getPostGetOneQueryKey = (url: string) => {
    return [`/post/one/${url}`] as const;
};

export const getPostGetOneInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetOneQueryKey(url);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetOne>>> = ({ signal }) => postGetOne(url, signal);

    return { queryKey, queryFn, enabled: !!url, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof postGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postGetOne>>>;
export type PostGetOneInfiniteQueryError = ErrorType<unknown>;

export function usePostGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof postGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof postGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetOne>>>,
    TError = ErrorType<unknown>,
>(
    url: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetOneInfiniteQueryOptions(url, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPostGetOneQueryOptions = <TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetOneQueryKey(url);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetOne>>> = ({ signal }) => postGetOne(url, signal);

    return { queryKey, queryFn, enabled: !!url, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof postGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof postGetOne>>>;
export type PostGetOneQueryError = ErrorType<unknown>;

export function usePostGetOne<TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof postGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetOne<TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof postGetOne>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetOne<TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetOne<TData = Awaited<ReturnType<typeof postGetOne>>, TError = ErrorType<unknown>>(
    url: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetOne>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetOneQueryOptions(url, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postGetComments = (id: number, signal?: AbortSignal) => {
    return axiosCall<PostCommentsList>({ url: `/post/comments/${id}`, method: 'GET', signal });
};

export const getPostGetCommentsQueryKey = (id: number) => {
    return [`/post/comments/${id}`] as const;
};

export const getPostGetCommentsInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof postGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetCommentsQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetComments>>> = ({ signal }) =>
        postGetComments(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof postGetComments>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetCommentsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postGetComments>>>;
export type PostGetCommentsInfiniteQueryError = ErrorType<unknown>;

export function usePostGetCommentsInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetComments>>,
                    TError,
                    Awaited<ReturnType<typeof postGetComments>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetCommentsInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetComments>>,
                    TError,
                    Awaited<ReturnType<typeof postGetComments>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetCommentsInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetCommentsInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetComments>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetCommentsInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPostGetCommentsQueryOptions = <
    TData = Awaited<ReturnType<typeof postGetComments>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetCommentsQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetComments>>> = ({ signal }) =>
        postGetComments(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof postGetComments>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof postGetComments>>>;
export type PostGetCommentsQueryError = ErrorType<unknown>;

export function usePostGetComments<TData = Awaited<ReturnType<typeof postGetComments>>, TError = ErrorType<unknown>>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetComments>>,
                    TError,
                    Awaited<ReturnType<typeof postGetComments>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetComments<TData = Awaited<ReturnType<typeof postGetComments>>, TError = ErrorType<unknown>>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetComments>>,
                    TError,
                    Awaited<ReturnType<typeof postGetComments>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetComments<TData = Awaited<ReturnType<typeof postGetComments>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetComments<TData = Awaited<ReturnType<typeof postGetComments>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetComments>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetCommentsQueryOptions(id, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postGetSeo = (id: string, signal?: AbortSignal) => {
    return axiosCall<SeoItem>({ url: `/post/seo/${id}`, method: 'GET', signal });
};

export const getPostGetSeoQueryKey = (id: string) => {
    return [`/post/seo/${id}`] as const;
};

export const getPostGetSeoInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof postGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetSeoQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetSeo>>> = ({ signal }) => postGetSeo(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof postGetSeo>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetSeoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postGetSeo>>>;
export type PostGetSeoInfiniteQueryError = ErrorType<unknown>;

export function usePostGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof postGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof postGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetSeoInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof postGetSeo>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetSeoInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPostGetSeoQueryOptions = <TData = Awaited<ReturnType<typeof postGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPostGetSeoQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postGetSeo>>> = ({ signal }) => postGetSeo(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof postGetSeo>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostGetSeoQueryResult = NonNullable<Awaited<ReturnType<typeof postGetSeo>>>;
export type PostGetSeoQueryError = ErrorType<unknown>;

export function usePostGetSeo<TData = Awaited<ReturnType<typeof postGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof postGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetSeo<TData = Awaited<ReturnType<typeof postGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof postGetSeo>>,
                    TError,
                    Awaited<ReturnType<typeof postGetSeo>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostGetSeo<TData = Awaited<ReturnType<typeof postGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostGetSeo<TData = Awaited<ReturnType<typeof postGetSeo>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postGetSeo>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPostGetSeoQueryOptions(id, options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
