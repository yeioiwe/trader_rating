/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Project API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type { ScammerCommentList, ScammerDemoProfileItemList, ScammerProfileItem } from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const scammersGetList = (signal?: AbortSignal) => {
    return axiosCall<ScammerDemoProfileItemList>({ url: `/scammers/list`, method: 'GET', signal });
};

export const getScammersGetListQueryKey = () => {
    return [`/scammers/list`] as const;
};

export const getScammersGetListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetList>>> = ({ signal }) => scammersGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof scammersGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetList>>>;
export type ScammersGetListInfiniteQueryError = ErrorType<unknown>;

export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getScammersGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetList>>> = ({ signal }) => scammersGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof scammersGetList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetListQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetList>>>;
export type ScammersGetListQueryError = ErrorType<unknown>;

export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof scammersGetList>>,
                TError,
                Awaited<ReturnType<typeof scammersGetList>>
            >,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetList<
    TData = Awaited<ReturnType<typeof scammersGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetListQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const scammersGetOne = (id: string, signal?: AbortSignal) => {
    return axiosCall<ScammerProfileItem>({ url: `/scammers/project/${id}`, method: 'GET', signal });
};

export const getScammersGetOneQueryKey = (id: string) => {
    return [`/scammers/project/${id}`] as const;
};

export const getScammersGetOneInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetOne>>> = ({ signal }) =>
        scammersGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof scammersGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetOne>>>;
export type ScammersGetOneInfiniteQueryError = ErrorType<unknown>;

export function useScammersGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetOne>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetOneInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetOne>>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetOneInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getScammersGetOneQueryOptions = <
    TData = Awaited<ReturnType<typeof scammersGetOne>>,
    TError = ErrorType<unknown>,
>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetOneQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetOne>>> = ({ signal }) =>
        scammersGetOne(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof scammersGetOne>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetOne>>>;
export type ScammersGetOneQueryError = ErrorType<unknown>;

export function useScammersGetOne<TData = Awaited<ReturnType<typeof scammersGetOne>>, TError = ErrorType<unknown>>(
    id: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetOne>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetOne<TData = Awaited<ReturnType<typeof scammersGetOne>>, TError = ErrorType<unknown>>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetOne>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetOne>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetOne<TData = Awaited<ReturnType<typeof scammersGetOne>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetOne<TData = Awaited<ReturnType<typeof scammersGetOne>>, TError = ErrorType<unknown>>(
    id: string,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetOne>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetOneQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const scammersGetCommentList = (id: number, signal?: AbortSignal) => {
    return axiosCall<ScammerCommentList>({ url: `/scammers/comment/${id}`, method: 'GET', signal });
};

export const getScammersGetCommentListQueryKey = (id: number) => {
    return [`/scammers/comment/${id}`] as const;
};

export const getScammersGetCommentListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetCommentList>>> = ({ signal }) =>
        scammersGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof scammersGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetCommentListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetCommentList>>>;
export type ScammersGetCommentListInfiniteQueryError = ErrorType<unknown>;

export function useScammersGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetCommentListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof scammersGetCommentList>>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>>;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetCommentListInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getScammersGetCommentListQueryOptions = <
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getScammersGetCommentListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scammersGetCommentList>>> = ({ signal }) =>
        scammersGetCommentList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof scammersGetCommentList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ScammersGetCommentListQueryResult = NonNullable<Awaited<ReturnType<typeof scammersGetCommentList>>>;
export type ScammersGetCommentListQueryError = ErrorType<unknown>;

export function useScammersGetCommentList<
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetCommentList>>
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetCommentList<
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof scammersGetCommentList>>,
                    TError,
                    Awaited<ReturnType<typeof scammersGetCommentList>>
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useScammersGetCommentList<
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useScammersGetCommentList<
    TData = Awaited<ReturnType<typeof scammersGetCommentList>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof scammersGetCommentList>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getScammersGetCommentListQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
