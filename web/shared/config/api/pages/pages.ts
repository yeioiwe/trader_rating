/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Project API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    MutationFunction,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';

import type {
    CreateCommentDto,
    FooterStripItem,
    HeaderBannerItem,
    ImagesBannerList,
    LawyerBannerItem,
    LawyerLayoutItem,
    LawyerProfileItem,
    ReviewRequestDto,
    SearchItemList,
    YoutubeLayoutItem,
} from '../api.schemas';

import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const pagesGetHeaderBanner = (signal?: AbortSignal) => {
    return axiosCall<HeaderBannerItem>({ url: `/pages/header_banner`, method: 'GET', signal });
};

export const getPagesGetHeaderBannerQueryKey = () => {
    return [`/pages/header_banner`] as const;
};

export const getPagesGetHeaderBannerInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetHeaderBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetHeaderBanner>>> = ({ signal }) =>
        pagesGetHeaderBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetHeaderBannerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>;
export type PagesGetHeaderBannerInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetHeaderBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetHeaderBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetHeaderBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetHeaderBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetHeaderBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetHeaderBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetHeaderBannerInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetHeaderBannerQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetHeaderBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetHeaderBanner>>> = ({ signal }) =>
        pagesGetHeaderBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetHeaderBannerQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetHeaderBanner>>>;
export type PagesGetHeaderBannerQueryError = ErrorType<unknown>;

export function usePagesGetHeaderBanner<
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetHeaderBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetHeaderBanner<
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetHeaderBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetHeaderBanner<
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetHeaderBanner<
    TData = Awaited<ReturnType<typeof pagesGetHeaderBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetHeaderBanner>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetHeaderBannerQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesGetImagesBanner = (signal?: AbortSignal) => {
    return axiosCall<ImagesBannerList>({ url: `/pages/images_banner`, method: 'GET', signal });
};

export const getPagesGetImagesBannerQueryKey = () => {
    return [`/pages/images_banner`] as const;
};

export const getPagesGetImagesBannerInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetImagesBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetImagesBanner>>> = ({ signal }) =>
        pagesGetImagesBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetImagesBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetImagesBannerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetImagesBanner>>>;
export type PagesGetImagesBannerInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetImagesBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetImagesBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetImagesBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetImagesBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetImagesBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetImagesBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetImagesBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetImagesBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetImagesBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetImagesBannerInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetImagesBannerQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetImagesBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetImagesBanner>>> = ({ signal }) =>
        pagesGetImagesBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetImagesBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetImagesBannerQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetImagesBanner>>>;
export type PagesGetImagesBannerQueryError = ErrorType<unknown>;

export function usePagesGetImagesBanner<
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetImagesBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetImagesBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetImagesBanner<
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetImagesBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetImagesBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetImagesBanner<
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetImagesBanner<
    TData = Awaited<ReturnType<typeof pagesGetImagesBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetImagesBanner>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetImagesBannerQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesGetLawyerBanner = (signal?: AbortSignal) => {
    return axiosCall<LawyerBannerItem>({ url: `/pages/lawyer_banner`, method: 'GET', signal });
};

export const getPagesGetLawyerBannerQueryKey = () => {
    return [`/pages/lawyer_banner`] as const;
};

export const getPagesGetLawyerBannerInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerBanner>>> = ({ signal }) =>
        pagesGetLawyerBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerBannerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>;
export type PagesGetLawyerBannerInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetLawyerBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerBannerInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerBannerInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetLawyerBannerQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerBannerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerBanner>>> = ({ signal }) =>
        pagesGetLawyerBanner(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerBannerQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerBanner>>>;
export type PagesGetLawyerBannerQueryError = ErrorType<unknown>;

export function usePagesGetLawyerBanner<
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerBanner<
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerBanner>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerBanner<
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerBanner<
    TData = Awaited<ReturnType<typeof pagesGetLawyerBanner>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerBanner>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerBannerQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesGetYoutubeLayout = (signal?: AbortSignal) => {
    return axiosCall<YoutubeLayoutItem>({ url: `/pages/youtube_layout`, method: 'GET', signal });
};

export const getPagesGetYoutubeLayoutQueryKey = () => {
    return [`/pages/youtube_layout`] as const;
};

export const getPagesGetYoutubeLayoutInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetYoutubeLayoutQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>> = ({ signal }) =>
        pagesGetYoutubeLayout(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetYoutubeLayoutInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>;
export type PagesGetYoutubeLayoutInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetYoutubeLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetYoutubeLayout>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetYoutubeLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetYoutubeLayout>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetYoutubeLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetYoutubeLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetYoutubeLayoutInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetYoutubeLayoutQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetYoutubeLayoutQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>> = ({ signal }) =>
        pagesGetYoutubeLayout(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetYoutubeLayoutQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>>;
export type PagesGetYoutubeLayoutQueryError = ErrorType<unknown>;

export function usePagesGetYoutubeLayout<
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetYoutubeLayout>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetYoutubeLayout<
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetYoutubeLayout>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetYoutubeLayout<
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetYoutubeLayout<
    TData = Awaited<ReturnType<typeof pagesGetYoutubeLayout>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetYoutubeLayout>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetYoutubeLayoutQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesGetLawyerLayout = (signal?: AbortSignal) => {
    return axiosCall<LawyerLayoutItem>({ url: `/pages/lawyer_layout`, method: 'GET', signal });
};

export const getPagesGetLawyerLayoutQueryKey = () => {
    return [`/pages/lawyer_layout`] as const;
};

export const getPagesGetLawyerLayoutInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerLayoutQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerLayout>>> = ({ signal }) =>
        pagesGetLawyerLayout(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerLayoutInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>;
export type PagesGetLawyerLayoutInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetLawyerLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerLayout>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerLayout>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerLayoutInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerLayoutInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetLawyerLayoutQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerLayoutQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerLayout>>> = ({ signal }) =>
        pagesGetLawyerLayout(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerLayoutQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerLayout>>>;
export type PagesGetLawyerLayoutQueryError = ErrorType<unknown>;

export function usePagesGetLawyerLayout<
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerLayout>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerLayout<
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerLayout>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerLayout<
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerLayout<
    TData = Awaited<ReturnType<typeof pagesGetLawyerLayout>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerLayout>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerLayoutQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesGetFooterStrip = (signal?: AbortSignal) => {
    return axiosCall<FooterStripItem>({ url: `/pages/footer_strip`, method: 'GET', signal });
};

export const getPagesGetFooterStripQueryKey = () => {
    return [`/pages/footer_strip`] as const;
};

export const getPagesGetFooterStripInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetFooterStripQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetFooterStrip>>> = ({ signal }) =>
        pagesGetFooterStrip(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetFooterStrip>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetFooterStripInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetFooterStrip>>>;
export type PagesGetFooterStripInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetFooterStripInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetFooterStrip>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetFooterStrip>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetFooterStripInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetFooterStrip>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetFooterStrip>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetFooterStripInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetFooterStripInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetFooterStrip>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetFooterStripInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetFooterStripQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetFooterStripQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetFooterStrip>>> = ({ signal }) =>
        pagesGetFooterStrip(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetFooterStrip>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetFooterStripQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetFooterStrip>>>;
export type PagesGetFooterStripQueryError = ErrorType<unknown>;

export function usePagesGetFooterStrip<
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetFooterStrip>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetFooterStrip>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetFooterStrip<
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetFooterStrip>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetFooterStrip>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetFooterStrip<
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetFooterStrip<
    TData = Awaited<ReturnType<typeof pagesGetFooterStrip>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetFooterStrip>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetFooterStripQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesCreateReviewRequest = (reviewRequestDto: ReviewRequestDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/review/create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: reviewRequestDto,
        signal,
    });
};

export const getPagesCreateReviewRequestMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesCreateReviewRequest>>,
        TError,
        { data: ReviewRequestDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesCreateReviewRequest>>,
    TError,
    { data: ReviewRequestDto },
    TContext
> => {
    const mutationKey = ['pagesCreateReviewRequest'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesCreateReviewRequest>>,
        { data: ReviewRequestDto }
    > = props => {
        const { data } = props ?? {};

        return pagesCreateReviewRequest(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesCreateReviewRequestMutationResult = NonNullable<Awaited<ReturnType<typeof pagesCreateReviewRequest>>>;
export type PagesCreateReviewRequestMutationBody = ReviewRequestDto;
export type PagesCreateReviewRequestMutationError = ErrorType<unknown>;

export const usePagesCreateReviewRequest = <TError = ErrorType<unknown>, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof pagesCreateReviewRequest>>,
            TError,
            { data: ReviewRequestDto },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<
    Awaited<ReturnType<typeof pagesCreateReviewRequest>>,
    TError,
    { data: ReviewRequestDto },
    TContext
> => {
    const mutationOptions = getPagesCreateReviewRequestMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};
export const pagesGetLawyerProfile = (signal?: AbortSignal) => {
    return axiosCall<LawyerProfileItem>({ url: `/pages/lawyer_profile`, method: 'GET', signal });
};

export const getPagesGetLawyerProfileQueryKey = () => {
    return [`/pages/lawyer_profile`] as const;
};

export const getPagesGetLawyerProfileInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerProfileQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerProfile>>> = ({ signal }) =>
        pagesGetLawyerProfile(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerProfileInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>;
export type PagesGetLawyerProfileInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetLawyerProfileInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerProfile>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerProfileInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerProfile>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerProfileInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerProfileInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerProfileInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetLawyerProfileQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetLawyerProfileQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetLawyerProfile>>> = ({ signal }) =>
        pagesGetLawyerProfile(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetLawyerProfileQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetLawyerProfile>>>;
export type PagesGetLawyerProfileQueryError = ErrorType<unknown>;

export function usePagesGetLawyerProfile<
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerProfile>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerProfile<
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetLawyerProfile>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetLawyerProfile<
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetLawyerProfile<
    TData = Awaited<ReturnType<typeof pagesGetLawyerProfile>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetLawyerProfile>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetLawyerProfileQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const pagesCreateComment = (createCommentDto: CreateCommentDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/pages/create_comment`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createCommentDto,
        signal,
    });
};

export const getPagesCreateCommentMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof pagesCreateComment>>,
        TError,
        { data: CreateCommentDto },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof pagesCreateComment>>,
    TError,
    { data: CreateCommentDto },
    TContext
> => {
    const mutationKey = ['pagesCreateComment'];
    const { mutation: mutationOptions } = options
        ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey } };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof pagesCreateComment>>,
        { data: CreateCommentDto }
    > = props => {
        const { data } = props ?? {};

        return pagesCreateComment(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type PagesCreateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof pagesCreateComment>>>;
export type PagesCreateCommentMutationBody = CreateCommentDto;
export type PagesCreateCommentMutationError = ErrorType<unknown>;

export const usePagesCreateComment = <TError = ErrorType<unknown>, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof pagesCreateComment>>,
            TError,
            { data: CreateCommentDto },
            TContext
        >;
    },
    queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof pagesCreateComment>>, TError, { data: CreateCommentDto }, TContext> => {
    const mutationOptions = getPagesCreateCommentMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};
export const pagesGetSaerchList = (signal?: AbortSignal) => {
    return axiosCall<SearchItemList>({ url: `/pages/search_list`, method: 'GET', signal });
};

export const getPagesGetSaerchListQueryKey = () => {
    return [`/pages/search_list`] as const;
};

export const getPagesGetSaerchListInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetSaerchList>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetSaerchListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetSaerchList>>> = ({ signal }) =>
        pagesGetSaerchList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof pagesGetSaerchList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetSaerchListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetSaerchList>>>;
export type PagesGetSaerchListInfiniteQueryError = ErrorType<unknown>;

export function usePagesGetSaerchListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetSaerchList>>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetSaerchList>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetSaerchList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetSaerchListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetSaerchList>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetSaerchList>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetSaerchList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetSaerchListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetSaerchList>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetSaerchListInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof pagesGetSaerchList>>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>>;
    },
    queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetSaerchListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getPagesGetSaerchListQueryOptions = <
    TData = Awaited<ReturnType<typeof pagesGetSaerchList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getPagesGetSaerchListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pagesGetSaerchList>>> = ({ signal }) =>
        pagesGetSaerchList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof pagesGetSaerchList>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PagesGetSaerchListQueryResult = NonNullable<Awaited<ReturnType<typeof pagesGetSaerchList>>>;
export type PagesGetSaerchListQueryError = ErrorType<unknown>;

export function usePagesGetSaerchList<
    TData = Awaited<ReturnType<typeof pagesGetSaerchList>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetSaerchList>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetSaerchList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetSaerchList<
    TData = Awaited<ReturnType<typeof pagesGetSaerchList>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof pagesGetSaerchList>>,
                    TError,
                    Awaited<ReturnType<typeof pagesGetSaerchList>>
                >,
                'initialData'
            >;
    },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePagesGetSaerchList<
    TData = Awaited<ReturnType<typeof pagesGetSaerchList>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePagesGetSaerchList<
    TData = Awaited<ReturnType<typeof pagesGetSaerchList>>,
    TError = ErrorType<unknown>,
>(
    options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof pagesGetSaerchList>>, TError, TData>> },
    queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getPagesGetSaerchListQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
